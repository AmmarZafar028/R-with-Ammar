m <- cor(df, method = pearson)
m <- cor(df, method = "pearson")
corrplot(m, order = "hclust", addrect = 2)
head(df)
df <- mtcars
head(df)
tail(df)
tail(df)
df <- as.matrix(df)
heatmap(df)
heatmap(df, scale = "column")
heatmap(df, scale = "column")
heatmap(df, scale = "column", cm.colors(256))
heatmap(df, scale = "column", cm.colors((256)))
heatmap(df, scale = "column")
heatmap(df, scale = "column", cm.colors((256)))
heatmap(df, scale = "column", cm.colors((256)))
heatmap(df, scale = "column", cm.colors((256)))
heatmap(df, scale = "column", cm.colors{(256)})
heatmap(df, scale = "column", cm.colors((256)))
heatmap(df, scale = "column", col = cm.colors(256))
heatmap(df, scale = "column", col = terrain.colors(256))
library(RColorBrewer)
coul <- colorRampPalette(brewer.pal(8, "PiyG"))(25)
library(RColorBrewer)
library(RColorBrewer)
coul <- colorRampPalette(brewer.pal(8, "PiyG"))(25)
library(RColorBrewer)
library(RColorBrewer)
coul <- colorRampPalette(brewer.pal(8, "PiyG"))(25)
library(RColorBrewer)
coul <- colorRampPalette(brewer.pal(8, "PiYG"))(25)
heatmap(df, scale = "column", col = coul)
library(RColorBrewer)
coul <- colorRampPalette(brewer.pal(8, "PiYG"))(25)
heatmap(df, scale = "column", col = coul)
library(RColorBrewer)
coul <- colorRampPalette(brewer.pal(8, "PiYG"))(25)
heatmap(df, scale = "column", col = coul)
display.brewer.all()
library(RColorBrewer)
coul <- colorRampPalette(brewer.pal(8, "PiYG"))(25)
heatmap(df, scale = "column", col = coul)
volcano
display.brewer.all()
library(tidyverse)
volcano %>%
# Data Wrangling
as_tible() %>%
rowid_to_column(var = "x") %>%
gather(key = "Y", value = 2, -1) %>%
# change Y to numeric
mutate(y = as.numeric(gsub("V","", Y)))
library(tidyverse)
volcano %>%
# Data Wrangling
as_tibble() %>%
rowid_to_column(var = "x") %>%
gather(key = "Y", value = 2, -1) %>%
# change Y to numeric
mutate(y = as.numeric(gsub("V","", Y)))
library(tidyverse)
volcano %>%
# Data Wrangling
as_tibble() %>%
rowid_to_column(var = "x") %>%
gather(key = "Y", value = Z, -1) %>%
# change Y to numeric
mutate(y = as.numeric(gsub("V","", Y)))
library(tidyverse)
volcano <- volcano %>%
# Data Wrangling
as_tibble() %>%
rowid_to_column(var = "x") %>%
gather(key = "Y", value = Z, -1) %>%
# change Y to numeric
mutate(y = as.numeric(gsub("V","", Y)))
volcano %>% ggplot(aes(X,Y))+geom_tile
volcano %>% ggplot(aes(X,Y))+geom_tile()
volcano %>% ggplot(aes(X,Y, col = z))+geom_tile()
volcano %>% ggplot(aes(x,Y, col = z))+geom_tile()
volcano %>% ggplot(aes(X,Y, col = Z))+geom_tile()
volcano %>% ggplot(aes(X,Y, col = Z))+geom_tile()
library(tidyverse)
volcano <- volcano %>%
# Data Wrangling
as_tibble() %>%
rowid_to_column(var = "X") %>%
gather(key = "Y", value = Z, -1) %>%
# change Y to numeric
mutate(y = as.numeric(gsub("V","", Y)))
library(tidyverse)
volcano <- volcano %>%
# Data Wrangling
as_tibble() %>%
rowid_to_column(var = "X") %>%
gather(key = "Y", value = Z, -1) %>%
# change Y to numeric
mutate(y = as.numeric(gsub("V","", Y)))
library(tidyverse)
volcano <- volcano %>%
# Data Wrangling
as_tibble() %>%
rowid_to_column(var = "X") %>%
gather(key = "Y", value = Z, -1) %>%
# change Y to numeric
mutate(y = as.numeric(gsub("V","", Y)))
library(tidyverse)
volcano %>%
# Data Wrangling
as_tibble() %>%
rowid_to_column(var = "X") %>%
gather(key = "Y", value = Z, -1) %>%
# change Y to numeric
mutate(y = as.numeric(gsub("V","", Y)))
volcano
library(tidyverse)
volcano %>%
# Data Wrangling
as_tibble() %>%
rowid_to_column(var = "X") %>%
gather(key = "Y", value = Z, -1) %>%
# change Y to numeric
mutate(y = as.numeric(gsub("V","", Y)))
library(tidyverse)
volcano %>%
# Data Wrangling
as_tibble() %>%
rowid_to_column(var = "X") %>%
gather(key = "Y", value = Z, -1) %>%
# change Y to numeric
mutate(y = as.numeric(gsub("V","", Y)))
library(tidyverse)
volcano %>%
# Data Wrangling
as_tibble() %>%
rowid_to_column(var = "X") %>%
gather(key = "Y", value = Z, -1) %>%
# change Y to numeric
mutate(y = as.numeric(gsub("V","", Y)))
volcano %>% ggplot(aes(X,Y, col =Z))+geom_tile()
volcano %>% ggplot(aes(X,y, col =Z))+geom_tile()
volcano %>% ggplot(aes(X,Y, col =Z))+geom_tile()
volcano %>% ggplot(aes(X,Y))+geom_tile()
library(tidyverse)
volcano %>%
# Data Wrangling
as_tibble() %>%
rowid_to_column(var = "X") %>%
gather(key = "Y", value = Z, -1) %>%
# change Y to numeric
mutate(Y = as.numeric(gsub("V","", Y)))
volcano %>% ggplot(aes(X,Y))+geom_tile()
volcano %>% ggplot(aes(X,Y))+geom_tile()
volcano %>% ggplot(aes(X,Y))+geom_tile()
volcano %>% ggplot(aes(X,Y))+geom_tile()
volcano %>% ggplot(aes(x,y))+geom_tile()
volcano %>% ggplot(aes(X,Y))+geom_bar()
volcano %>% ggplot(aes(X,Y, fill = Z))+geom_tile()
library(tidyverse)
volcano %>%
# Data Wrangling
as_tibble() %>%
rowid_to_column(var = "X") %>%
gather(key = "Y", value = Z, -1) %>%
# change Y to numeric
mutate(Y = as.numeric(gsub("V","", Y)))
volcano %>% ggplot(aes(X,Y, fill = Z))+geom_tile()
volcano %>% ggplot(aes(X,Y, fill = Z))+geom_tile()
install.packages(hrbrthemes)
install.packages("hrbrthemes")
# Using plotly for plots
# Library
library(ggplot)
# Using plotly for plots
# Library
library(ggplot)
install.packages("ggplot2")
install.packages("ggplot2")
# Using plotly for plots
# Library
library(ggplot2)
library(hrbrthemes)
## Dummy data
x <- LETTERS[1:20]
y <- pasteo("var", seq(1,20))
# Using plotly for plots
# Library
library(ggplot2)
library(hrbrthemes)
## Dummy data
x <- LETTERS[1:20]
y <- paste0("var", seq(1,20))
data <- expand.grid(X =x, Y=y)
data$Z <- runif(400,0,5)
data
install.packages("plotly")
library(plotly)
# classic ggplot, with text in aes
p <- ggplot(data, aes(X,Y, fill = Z))+geom_tile + theme_ipsum()
library(plotly)
# classic ggplot, with text in aes
p <- ggplot(data, aes(X,Y, fill = Z))+geom_tile() + theme_ipsum()
p
library(plotly)
# classic ggplot, with text in aes
p <- ggplot(data, aes(X,Y, fill = Z))+geom_tile() + theme_ipsum()
p
library(plotly)
# classic ggplot, with text in aes
p <- ggplot(data, aes(X,Y, fill = Z))+geom_tile()
p
install.packages("plotly", dependencies = TRUE)
install.packages("plotly", dependencies = TRUE)
library(plotly)
# classic ggplot, with text in aes
p <- ggplot(data, aes(X,Y, fill = Z))+geom_tile()
p
pp <- ggplotlylotly(p,tooltip = "text" )
library(plotly)
# classic ggplot, with text in aes
p <- ggplot(data, aes(X,Y, fill = Z))+geom_tile()
p
pp <- ggplotly(p,tooltip = "text" )
pp
library(plotly)
ggplotly(p)
install.packages("htmlwidgets")
install.packages("htmlwidgets")
install.packages("htmlwidgets")
install.packages("htmlwidgets")
library(htmlwidgets)
savewidget(pp, file =",/Heatmap.html")
library(htmlwidgets)
savewidget(pp, file ="./Heatmap.html")
library(htmlwidgets)
savewidget(pp, file="./Heatmap.html")
library(htmlwidgets)
savewidget(pp, file="./Heatmap.html")
library(htmlwidgets)
savewidget(pp, file="./Heatmap.html")
library(htmlwidgets)
saveWidget(pp, file="./Heatmap.html")
# Library
install.packages("ggpubr")
library(ggpubr)
ggboxplot(df, x = "dose", y = "len", color = "dose")
# Importing a dataset
df <- ToothGrowth
# Importing a dataset
df <- ToothGrowth
ggboxplot(df, x = "dose", y = "len", color = "dose")
ggboxplot(df, x = "dose", y = "len", color = "dose",
add = "jitter",
shape = "dose", xlab = "Dose",
ylab = "Length", legend.title = "Dose")
ggboxplot(df, x = "dose", y = "len", color = "dose",
add = "jitter",
shape = "dose", xlab = "Dose",
ylab = "Length", legend.title = "Dose",
palette = C("Blue", "red", "green"))
ggboxplot(df, x = "dose", y = "len", color = "dose",
add = "jitter",
shape = "dose", xlab = "Dose",
ylab = "Length", legend.title = "Dose",
palette = C("Blue", "red", "green"))
ggboxplot(df, x = "dose", y = "len", color = "dose",
add = "jitter",
shape = "dose", xlab = "Dose",
ylab = "Length", legend.title = "Dose",
palette = c("Blue", "red", "green"))
P <- ggboxplot(df, x = "dose", y = "len", color = "dose",
add = "jitter",
shape = "dose", xlab = "Dose",
ylab = "Length", legend.title = "Dose",
palette = c("Blue", "red", "green"));p
P <- ggboxplot(df, x = "dose", y = "len", color = "dose",
add = "jitter",
shape = "dose", xlab = "Dose",
ylab = "Length", legend.title = "Dose",
palette = c("Blue", "red", "green"));P
p + stat_compare_means(comparisons = my_comparisons)
P + stat_compare_means(comparisons = my_comparisons)
my_comparisons <- list(c("0.5", "1"),
c("0.5","2"),
c("1", "2"))
P + stat_compare_means(comparisons = my_comparisons)
P + stat_compare_means(comparisons = my_comparisons,
label = "p.signif")+
stat_compare_means(label.y = 50)+ylim(0,60)
p2 <- ggboxplot(ToothGrowth, x = "supp", y = "len",
color = "supp", palette = "npg",
add = "jitter",
facet.by = "dose", short.panel.labs = FALSE);p2
# Use only p.format as label. Remove method name.
p2 <- p2 + stat_compare_means(
aes(label = paste0("p = ", ..p.format..))
);p2
install.packages(ggpubfigs)
df <- iris
# One sample t test
t.test(df$Sepal.Length,mu = 6.5)
t.test(df$Sepal.Length,df$Petal.Length,paired = TRUE)
post_treatment <-c(rnorm(2000, mean = 144, std =9))
post_treatment <-c(rnorm(2000, mean = 144, std =9))
pre_treatment <- c(rnorm(2000,mean =150, std =10))
post_treatment <- c(rnorm(2000, mean = 144, std =9))
post_treatment <- c(rnorm(2000, mean = 144, sd =9))
pre_treatment <- c(rnorm(2000,mean =150, sd =10))
post_treatment <- c(rnorm(2000, mean = 144, sd =9))
# t test ab lagna h paired wala
t.test(pre_treatment,post_treatment,paired = TRUE)
# t test ab lagna h paired wala
t.test(pre_treatment,post_treatment,paired = TRUE)
t.test(df$Petal.Width ~ df$Species)
df <- iris
df <- df %>%
filter(Species %in% c("Setosa", "Versicolor"))
df <- df %>%
filter(Species %in% c("Setosa", "versicolor"))
View(df)
View(df)
df <- df %>%
filter(Species %in% c("setosa", "versicolor"))
df <- df %>%
filter(Species %in% c("setosa", "versicolor"))
df <- df %>%
filter(Species %in% c("setosa", "versicolor"))
df <- df % >%
filter(Species %in% c("setosa", "versicolor"))
df <- df %>%
filter(Species %in% c("setosa", "versicolor"))
t.test(df$Petal.Width ~ df$Species)
t.test(df$Petal.Width ~ df$Species)
df <- df %>%
filter(Species %in% c("setosa", "versicolor"))
df <- df %>%
filter(Species %in% c("setosa", "versicolor")) %>%
df <- df %>%
filter(Species %in% c("setosa", "versicolor")) %>%
t.test(Petal.Width ~ Species)
df <- df %>%
filter(Species %in% c("setosa", "versicolor")) %>%
t.test(df$Petal.Width ~ df$Species)
df <- df %>%
filter(Species %in% c("setosa", "versicolor")) %>%
t.test(df$Petal.Width ~ df$Species) %>%
df <- df %>%
filter(Species %in% c("setosa", "versicolor")) %>%
t.test(df$Petal.Width ~ df$Species)
t.test(df$Petal.Width ~ df$Species) %>%
library(tidyverse)
library(tidyverse)
t.test(df$Petal.Width ~ df$Species) %>%
df <- df %>%
filter(Species %in% c("setosa", "versicolor"))
df <- iris
df <- df %>%
filter(Species %in% c("setosa", "versicolor"))
t.test(df$Petal.Width ~ df$Species) %>%
t.test(df$Petal.Width ~ df$Species)
t.test(df$Petal.Width ~ df$Species)
## Dataset Import
install.packages("palmerpenguins")
library(palmerpenguins)
colnames(df)
colnames(df)
df <- penguins
colnames(df)
# find unique values
unique(df$species)
unique(df$island)
t.test(df$bill_length_mm~df$body_mass_g)
t.test(df$bill_length_mm ~ df$bill_depth_mm)
t.test(df$bill_length_mm ~ df$sex)
library(tidyverse)
ggplot(df, aes(sex,bill_length_mm,fill = sex))+geom_boxplot()
data <- df %>%
select(species, flipper_length_mm)
# summary
summary(data)
data %>%
group_by(species) %>%
summarize(mean(flipper_length_mm))
drop_na()
data <- df %>%
select(species, flipper_length_mm) %>%
drop_na()
data %>%
group_by(species) %>%
summarize(mean(flipper_length_mm))
ggplot(data)+
aes(species, flipper_length_mm, col = species)
ggplot(data)+
aes(species, flipper_length_mm, col = species)+
geom_jitter() + theme(legend.position = "none")
data %>%
group_by(species) %>%
summarize(shapiro_pvalue = shapiro.test(flipper_length_mm))$p.value)
data %>%
group_by(species) %>%
summarize(shapiro_pvalue = shapiro.test(flipper_length_mm)$p.value)
# Normal Distribution
data %>%
group_by(species) %>%
summarize(shapiro_pvalue = shapiro.test(flipper_length_mm)$p.value)
summary(s_w)
s_w <- shapiro.test(data$flipper_length_mm)
summary(s_w)
# Anova
res_aov <- aov(flipper_length_mm ~ species, data = data)
summary(res_aov)
hist(res_aov)
hist(res_aov$residuals)
qqnorm(res_aov$residuals)
shapiro.test(res_aov$residuals)
install.packages("car")
library(car)
leveneTest(flipper_length_mm ~ species, data = data)
install.packages("lattice")
library(lattice)
dorplot(flipper_length_mm ~ species data = data)
dorplot(flipper_length_mm ~ species, data = data)
dorplot(flipper_length_mm ~ species, data = data)
dotplot(flipper_length_mm ~ species, data = data)
ggplot(data) +
aes(species, flipper_length_mm, fill = species)+
geom_boxplot()
aggregate(flipper_length_mm ~ species, data = data,
function(x) round(c(mean = mean(x), sd = sd(x)), 2))
df1
df1 <- group_by(data, species) %>%
summarise(
mean = mean(flipper_length_mm, na.rm = TRUE),
sd = sd(flipper_length_mm,na.rm = TRUE))
df1
# Anova
oneway.test(flipper_length_mm ~ species, data = data, var.equal = TRUE)
# Anova 2nd way
res_aov <- aov(flipper_length_mm ~ species, data = data)
summary(res_aov)
# PostHoc test
install.packages("multcomp", dependencies = TRUE)
library(multcomp)
summary(aov)
res_aov <- aov(flipper_length_mm ~ species, data = data)
summary(aov)
post_test <- glht(res_aov, linfct = mcp(species = "Tukey"))
summary(post_test)
plot(post_test)
summary(Dun)
res_aov <- aov(flipper_length_mm ~ species, data = data)
summary(res_aov)
Dun <- glht(res_aov, linfct = mcp(species = "Dunnet"))
summary(Dun)
library(tidyverse)
library(tidyverse)
# Two way Anova
library(ggthemes)
library(multcompview)
library(multcompView)
library(multCompView)
install.packages("multCompview", dependencies = TRUE)
library(multCompView)
install.packages("multcompView")
# Two way Anova
library(ggthemes)
library(multCompView)
library(multCompView)
install.packages("multcompView",dependencies = TRUE)
# Two way Anova
library(ggthemes)
library(multCompView)
library(tidyverse)
df <- ToothGrowth
View(df)
# Calculate two way Anova
anova <- aov(len ~ supp*dose, data = df)
summary(anova)
letters <- multcompLetters4(anova, tukey)
install.packages("multcompview", dependencies = TRUE)
# mean and sd
df_mean <-df %>%
group_by(supp,dose) %>%
summarise(len_mean =mean(len), sd = sd(len)) %>%
# mean and sd
df_mean <-df %>%
group_by(supp,dose) %>%
summarise(len_mean =mean(len), sd = sd(len)) %>%
arrange(desc(len_mean))
# mean and sd
df_mean <-df %>%
group_by(supp,dose) %>%
summarise(len_mean =mean(len), sd = sd(len)) %>%
arrange(desc(len_mean))
install.packages("multcompview", dependencies = TRUE)
df_mean$letters  <- letters$letters..supp.dose..Letters
library(multcompView)
letters <- multcompLetters4(anova, tukey)
letters <- multcompLetters4(anova,tukey)
letters
letters <- multcompLetters4(anova,tukey)
letters
letters < data.frame(letters$"supp:dose"$Letters)
letters
df_mean
# mean and sd
df_mean <-df %>%
group_by(supp,dose) %>%
summarise(len_mean =mean(len), sd = sd(len)) %>%
arrange(desc(len_mean))
df_mean
